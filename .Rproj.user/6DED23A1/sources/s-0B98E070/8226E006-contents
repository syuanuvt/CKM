## the current script is a test of the novel CSSCR method
library(pracma)
library(remotes)
library(ggplot2)
library(GGally)
library(dplyr)
library(tidyr)
library(rARPACK)
library(RSpectra)
library(combinat)
library(mbclusterwise)
library(flexmix)
library(mclust)
library(fpc)
library(iCluster)
library(ClusterSSCA)
library(PCovR)










######calculate the real partition of the observations
RealPar <- function(n_cluster, data_y,true_score,loading_y){

  n_obs <- length(data_y)
  res_y <- matrix(nrow = n_obs, ncol = n_cluster)
  real_par <- rep(NA, length = n_obs)
  danger_par <- rep(0, length = n_obs)
  for (k in 1:n_cluster){
    res_y[,k] <- data_y - true_score %*% t(loading_y[[k]])
  }
  for (i in 1:n_obs){
    real_par[i] <- which.min(abs(res_y[i,]))
  }

  return(list(real_cluster_mem = real_par, ucluster_distance = res_y) )
}

ncluster <- 2
memcluster <- c(55,55)
ncom <- 1
ndistinct <- c(0,0)
nblock <- 2
nvar <- c(1,1)
ynvar <- 1
psparse <- 0
pnoise_x <- .1
pnoise_y <- 0
clust_reg <- as.matrix(c(1,-1))
com_rele <- 1
comp_str <- 1
equal_loading <- FALSE
n_test <- 10
pmean_x <- .1
pmean_y <- .1
p_combase <- 0
### data simulation with CSSCR (also include the relevance of the components)


### without any model selection


###########################################################################
###########################################################################
### without any model selection
CSSCR_nocon <- function(data_x,data_y,n_block, n_com, n_distinct, n_var, n_cluster, alpha = .8,
                        converge = 1e-7, converge_2 = 1e-7, iteration = 1000, start_part = NULL){

  ## fix the sparsity level to zero (p_sparse = 0)
  upper <- 1e9
  stop <- 0
  iter <- 0

  all_member <- nrow(data_x)
  sum_var <- ncol(data_x)
  y_var <- ncol(data_y)
  block_version_data <- list(length = 2)
  block_version_data[[1]] <- data_x[,1:n_var[1]]
  block_version_data[[2]] <- data_x[, (n_var[1] + 1):n_var[2]]
  n_total <- sum(n_com, n_distinct)

  ## structure-induced zeros
  distinct_index <- vector("numeric")
  distinct_zeros <- vector("numeric")
  if (sum(ndistinct) != 0){

    all_var <- 0
    ini_var <- 0
    for (p in 1:n_block){
      distinct_index <- c(distinct_index, rep(p, n_distinct[p]))
      ini_var <- ini_var + n_var[p]
      all_var <- c(all_var, ini_var)
    }

    for (r.distinct in 1:sum(n_distinct)){
      distinct_zeros <- c(distinct_zeros, ((sum_var * (n_com + r.distinct - 1)) + all_var[distinct_index[r.distinct]] + 1): ((sum_var * (n_com + r.distinct - 1)) + all_var[(distinct_index[r.distinct] + 1)]))
    }
  }

  # set the upper bound of minimum loss
  loss_all <- vector("numeric", length = iteration)

  # the starting partition
  start <- vector("numeric", length = n_cluster)
  for (y in 1:n_cluster){
    start[y] <- round(all_member / n_cluster)
  }
  start[n_cluster] <- all_member - (n_cluster - 1) * round(all_member / n_cluster)


  py <- list()
  if(is.null(start_part)){
    cluster_assign <- RandomStart(start)[[2]]
  }
  if(!is.null(start_part)){
    cluster_assign <- start_part
  }

  ###################################################
  #cluster_assign <- a
  svd_data <- svds(data_x, n_total)
  t <- svd_data$u
  x_square <- sum(data_x^2)
  y_square <- sum(data_y^2)
  #beta <- .5
  #alpha <- .5
  beta <- alpha * y_square / (alpha * y_square + (1-alpha) * x_square)

  #data_x <- MatrixCenter(data_x,1,0)
  #beta <- 0.9

  loss_min <- upper
  loss_p_all <- rep(NA, iteration)
  loss_t_all <- rep(NA, iteration)
  loss_t_all_1 <- rep(NA, iteration)
  loss_t_all_2 <- rep(NA, iteration)
  loss_t_all_3 <- rep(NA, iteration)
  for (v in 1:iteration){
    if(loss_min < converge & v > 20)  break
    loss_new <- rep(NA, all_member)
    if (v == 1){
      px <- t(data_x) %*% t
      px[distinct_zeros] <- 0
    }
    beta * sum((data_x - t %*% t(px))^2)
    #index.nsmallest <- sort(px^2, index.return = TRUE)$ix[1:(sparse_zeros+length(distinct_zeros))]
    #x[index.nsmallest] <- 0

    #if(v > 1){
    #  loss_p <- beta * sum((data_x - t %*% t(px))^2)
    #  for(k in 1:n_cluster){
    #    cluster_k <- which(cluster_assign == k)
    #    t_k <- t[cluster_k,]
    #    y_k <- data_y[cluster_k]
    #    loss_k <- (1-beta) * sum((y_k-(cbind(rep(1, nrow(t_k)), t_k)%*%py[[k]]))^2)
    #    loss_p <- loss_p+loss_k
    #  }
    #  loss_p_all[v] <- loss_p
    #}

    if (v == 1){
      for(k in 1:n_cluster){
        cluster_k <- which(cluster_assign == k)
        t_k <- t[cluster_k,]
        y_k <- data_y[cluster_k,]
        py[[k]] <- t(y_k) %*% t_k %*% inv(t(t_k) %*% t_k)
      }
    }

    ############################

    t <- matrix(0, nrow = all_member, ncol = n_total)
    for (k in 1:n_cluster){
      cluster_k <- which(cluster_assign == k)
      x_k <- data_x[cluster_k, ]
      y_k <- data_y[cluster_k]# - mean(data_y[cluster_k])
      zz <- beta * (diag(length(cluster_k)) %x% (t(px) %*% px)) + (1-beta)*(diag(length(cluster_k)) %x% (t(py[[k]]) %*% py[[k]]))
      zy <- beta * ((diag(length(cluster_k)) %x% t(px)) %*% as.vector(t(x_k))) + (1-beta)*((diag(length(cluster_k)) %x% t(py[[k]])) %*% y_k)
      t[cluster_k, ]<- matrix(inv(zz) %*% zy, nrow = length(cluster_k), byrow = TRUE)
    }

    ####################################
    loss_t2 <- 0
    for(k in 1:n_cluster){
      cluster_k <- which(cluster_assign == k)
      t_k <- t[cluster_k,]
      y_k <- data_y[cluster_k,]#-mean(data_y[cluster_k])
      loss_k <- (1-beta) * sum((y_k - t_k %*% t(py[[k]]))^2)
      loss_t2 <- loss_t2+loss_k
    }

    px <- t(data_x) %*% t %*% inv(t(t) %*% t)
    px[distinct_zeros] <- 0

    ######################################
    loss_t <- beta * sum((data_x - t %*% t(px))^2)
    #loss_t_all_1[v] <- loss_t
    loss_t_all_2[v] <- 0
    for(k in 1:n_cluster){
      cluster_k <- which(cluster_assign == k)
      t_k <- t[cluster_k,]
      y_k <- data_y[cluster_k,]#-mean(data_y[cluster_k])
      reg_results <- t(y_k) %*% t_k %*% inv(t(t_k) %*% t_k)
      py[[k]] <- reg_results
      loss_k <- (1-beta) * sum((y_k - t_k %*% t(py[[k]]))^2)
      loss_t <- loss_t+loss_k
      loss_t_all_2[v] <- loss_t_all_2[v] + loss_k
    }
    loss_t_all[v] <- loss_t

    if(v>1){
      loss_min <- loss_t_all[v-1] -loss_t_all[v]
    }
  }

  loss_final <- loss_t
  stop <- 0
  iter_all <- 0
  while(stop ==0 & iter_all < 50){

    iter_all <- iter_all + 1
    member_exchange <- 0
    loss_n_all <- list()
    for(n in 1:all_member){#length(cluster_assign)){
      #loss_n <- rep(NA, n_cluster)
      loss_n_all[[n]] <- rep(NA, n_cluster)
      ## get the cluster membership
      cluster_n <- cluster_assign[n]
      cluster_assign_temp <- cluster_assign
      #data_x_n <- data_x[-n,]
      #data_y_n <- data_y[-n]
      #t_n <- t[-n,]
      #cluster_assign_n <- cluster_assign[-n]
      py_temp <- list()
      px_temp <- list()
      t_temp <- list()

      for(g in 1:n_cluster){
        if (g == cluster_n){
          py_temp[[g]] <- py
          px_temp[[g]] <- px
          t_temp[[g]] <- t
          ##################
          loss_n_all[[n]][g] <- loss_final
        }
        if(g != cluster_n){
          cluster_assign_temp[n] <- g
          loss_min <- upper
          py_temp_k <- list()
          #loss_p_all <- rep(NA, iteration)
          loss_t_all <- rep(NA, iteration)

          for (v in 1:iteration){
            if(loss_min < converge_2 & v > 10)  break
            loss_new <- rep(NA, all_member)

            if (v == 1){
              t_temp_k <- t
              px_temp_k <- t(data_x) %*% t_temp_k %*% inv(t(t_temp_k) %*% t_temp_k)
              px_temp_k[distinct_zeros] <- 0
              for(k in 1:n_cluster){
                cluster_k <- which(cluster_assign_temp == k)
                t_k <- t_temp_k[cluster_k,]
                y_k <- data_y[cluster_k,]#-mean(data_y[cluster_k])
                py_temp_k[[k]] <- t(y_k) %*% t_k %*% inv(t(t_k) %*% t_k)
              }
            }


            #loss_p <- beta * sum((data_x - t %*% t(px_temp_k))^2)
            #for(k in 1:n_cluster){
            #  cluster_k <- which(cluster_assign_temp == k)
            #  t_k <- t[cluster_k,]
            #  y_k <- data_y[cluster_k]
            #  loss_k <- (1-beta) * sum((y_k-(cbind(rep(1, nrow(t_k)), t_k)%*%py[[k]]))^2)
            #  loss_p <- loss_p+loss_k
            #}
            #}
            t_temp_k <- matrix(0, nrow = all_member, ncol = n_total)
            for (k in 1:n_cluster){
              cluster_k <- which(cluster_assign_temp == k)
              x_k <- data_x[cluster_k,]
              xp <- beta * (x_k %*% px)
              y_k <- data_y[cluster_k,]# - mean(data_y[cluster_k])
              zz <- beta * (diag(length(cluster_k)) %x% (t(px_temp_k) %*% px_temp_k)) + (1-beta)*(diag(length(cluster_k)) %x% (t(py_temp_k[[k]]) %*% py_temp_k[[k]]))
              zy <- beta * ((diag(length(cluster_k)) %x% t(px_temp_k)) %*% as.vector(t(x_k))) + (1-beta)*((diag(length(cluster_k)) %x% t(py_temp_k[[k]])) %*% y_k)
              t_temp_k[cluster_k,] <- matrix(inv(zz) %*% zy, nrow = length(cluster_k), byrow = TRUE)
            }


            #t.ee <- eigen(t(t_new) %*% t_new, symmetric = FALSE)
            #t <- t_new %*% t.ee$vectors %*% inv(sqrt(diag(t.ee$values)))
            #gs <- gramSchmidt(t_new)
            #q <- px_temp_k %*% t(gs$R)
            #t_temp_k <- gs$Q

            px_temp_k <- t(data_x) %*% t_temp_k %*% inv(t(t_temp_k) %*% t_temp_k)
            px_temp_k[distinct_zeros] <- 0
            px_temp[[k]] <- px_temp_k
            loss_t <- beta * sum((data_x - t_temp_k %*% t(px_temp_k))^2)
            for(k in 1:n_cluster){
              cluster_k <- which(cluster_assign_temp == k)
              t_k <- t_temp_k[cluster_k,]
              y_k <- data_y[cluster_k,]# - mean(data_y[cluster_k])
              reg_results <- t(y_k) %*% t_k %*% inv(t(t_k) %*% t_k)
              py_temp_k[[k]]  <- reg_results
              loss_k <- (1-beta) * sum((y_k - t_k %*% t(py_temp_k[[k]]))^2)
              loss_t <- loss_t+loss_k
            }
            loss_t_all[v] <- loss_t

            if(v>1){
              loss_min <- loss_t_all[v-1] -loss_t_all[v]
            }
          }
          loss_n_all[[n]][g] <- loss_t
          py_temp[[g]] <- py_temp_k
          px_temp[[g]] <- px_temp_k
          t_temp[[g]] <- t_temp_k
        }
      }
      cluster_assign[n] <- which(loss_n_all[[n]] == min(loss_n_all[[n]]))
      g <- cluster_assign[n]
      py <- py_temp[[g]]
      px <- px_temp[[g]]
      t <- t_temp[[g]]
      loss_final <- min(loss_n_all[[n]])

      if(cluster_assign[n] != cluster_n){
        member_exchange <- 1
      }
    }

    if (member_exchange == 0){
      stop <- 1
    }
  }
  results <- list(cluster_assign = cluster_assign, loss = loss_n_all, score = t, loadings = px,
                  regs = py)
  return(results)
}
#########################################################################
#########################################################################
#########################################################################






#######################################
###################
### without any model selection
CSCCR_single <- function(data_x_complete,data_y_complete,n_block, n_com, n_distinct, n_var, alpha = .8,
                        converge = 1e-8, converge_2 = 1e-8, iteration = 1000, cluster_assign){

  ## fix the sparsity level to zero (p_sparse = 0)
  upper <- 1e9
  stop <- 0
  iter <- 0

  all_member <- nrow(data_x)
  sum_var <- ncol(data_x)
  y_var <- ncol(data_y)
  block_version_data <- list(length = 2)
  block_version_data[[1]] <- data_x[,1:n_var[1]]
  block_version_data[[2]] <- data_x[, (n_var[1] + 1):n_var[2]]
  n_total <- sum(n_com, n_distinct)


  ## structure-induced zeros
  distinct_index <- vector("numeric")
  distinct_zeros <- vector("numeric")
  if (sum(ndistinct) != 0){

    all_var <- 0
    ini_var <- 0
    for (p in 1:n_block){
      distinct_index <- c(distinct_index, rep(p, n_distinct[p]))
      ini_var <- ini_var + n_var[p]
      all_var <- c(all_var, ini_var)
    }

    for (r.distinct in 1:sum(n_distinct)){
      distinct_zeros <- c(distinct_zeros, ((sum_var * (n_com + r.distinct - 1)) + all_var[distinct_index[r.distinct]] + 1): ((sum_var * (n_com + r.distinct - 1)) + all_var[(distinct_index[r.distinct] + 1)]))
    }
  }

  # set the upper bound of minimum loss
  loss_all <- vector("numeric", length = iteration)
  ###################################################
  px <- list()
  py <- list()
  t <- matrix(nrow = all_member, ncol = n_total)
  #cluster_assign <- a
  n_cluster <- length(unique(cluster_assign))
  mean_x <- matrix(nrow = n_cluster, ncol = sum_var)
  for (i in 1:n_cluster){
    data_x <- data_x_complete[which(cluster_assign == i),]
    mean_x[i,] <- apply(data_x,2,mean)
    data_x <- MatrixCenter(data_x,1,0)

    data_y <- data_y_complete[which(cluster_assign == i)]
    data_y_center <- data_y - mean(data_y)
    svd_data <- svd(data_x, n_total)
    t_i <- svd_data$u
    x_square <- sum(data_x^2)
    y_square <- sum(data_y_center^2)
    #beta <- .5
    #alpha <- .5
    beta <- alpha * y_square / (alpha * y_square + (1-alpha) * x_square)

    #data_x <- MatrixCenter(data_x,1,0)
    #beta <- 0.9

    loss_min <- upper
    loss_t_all <- rep(NA, iteration)

    for (v in 1:iteration){
      if(loss_min < converge & v > 20)  break
      loss_new <- rep(NA, all_member)

      if (v == 1){

          px_i <- t(data_x) %*% t_i
          px_i[distinct_zeros] <- 0
          t_comb <- cbind(rep(1,nrow(t_i)), t_i)
          py_i <- t(data_y) %*% t_comb %*% inv(t(t_comb) %*% t_comb)
      }

      ############################

        xp <- beta * (data_x %*% px_i)
        y_k <- data_y - py_i[1]# - mean(data_y[cluster_k])
        xp1 <- (1-beta) * (y_k %*% t(py_i[-1]))
        xp_update <- xp + xp1
        xp_svd <- svd(xp_update)
        t_i <- (xp_svd$u %*% t(xp_svd$v))
      ####################################
      #px <- t(data_x) %*% t
      #px[distinct_zeros] <- 0

      #loss_t_all_1[v] <- loss_t
      loss_t_all[v] <- 0

      px_i <- t(data_x) %*% t_i
      px_i[distinct_zeros] <- 0
      t_comb <- cbind(rep(1,nrow(t_i)), t_i)
      py_i <- t(data_y) %*% t_comb %*% inv(t(t_comb) %*% t_comb)
      loss_k <- (1-beta) * sum((data_y - t_comb %*% t(py_i))^2) + beta * sum((data_x - t_i %*% t(px_i))^2)
      loss_t_all[v] <- loss_t_all[v] + loss_k

      if(v>1){
        loss_min <- loss_t_all[v-1] -loss_t_all[v]
      }
    }

    t[which(cluster_assign == i),] <- t_i
    px[[i]] <- px_i
    py[[i]] <- py_i
  }


  results <- list(loss = loss_min, score = t, loadings = px,
                  regs = py, mean_x = mean_x)
  return(results)
}
###############################################################
###############################################################
## the following code is not used
###############################################################


















####################################################################################
####################################################################################
### without any model selection
CSSCRnon <- function(data_x,data_y,n_block, n_com, n_distinct, n_var, n_cluster, p_sparse = 0, beta,
                     converge = 1e-9, iteration = 1000){

  ## fix the sparsity level to zero (p_sparse = 0)
  upper <- 1e9
  stop <- 0
  iter <- 0
  converge_2 <- 1e-6
  converge <- 1e6

  all_member <- nrow(data_x)
  sum_var <- ncol(data_x)
  block_version_data <- list(length = 2)
  block_version_data[[1]] <- data_x[,1:n_var[1]]
  block_version_data[[2]] <- data_x[, (n_var[1] + 1):n_var[2]]
  n_total <- sum(n_com, n_distinct)

  ## structure-induced zeros
  distinct_index <- vector("numeric")
  all_var <- 0
  ini_var <- 0
  for (p in 1:n_block){
    distinct_index <- c(distinct_index, rep(p, n_distinct[p]))
    ini_var <- ini_var + n_var[p]
    all_var <- c(all_var, ini_var)
  }
  distinct_zeros <- vector("numeric")
  for (r.distinct in 1:sum(n_distinct)){
    distinct_zeros <- c(distinct_zeros, ((sum_var * (n_com + r.distinct - 1)) + all_var[distinct_index[r.distinct]] + 1): ((sum_var * (n_com + r.distinct - 1)) + all_var[(distinct_index[r.distinct] + 1)]))
  }

  ## sparsity-induced zeros
  # the positions that are not yet specified as zeros
  #retain_zeros <- setdiff(1: (sum_var * n_total), distinct_zeros)

  # generate the component loading matrix for the predictors
  # the number of zeros in component loadings
  #sparse_zeros <- round(length(retain_zeros) * psparse)

  # set the upper bound of minimum loss
  loss_all <- vector("numeric", length = iteration)

  # the starting partition
  start <- vector("numeric", length = n_cluster)
  for (y in 1:n_cluster){
    start[y] <- round(all_member / n_cluster)
  }
  start[n_cluster] <- all_member - (n_cluster - 1) * round(all_member / n_cluster)

  py <- list()
  cluster_assign <- RandomStart(start)[[2]]
  ###################################################
  cluster_assign <- c(rep(1,25), rep(2,25), rep(3,25))
  cluster_assign[1:5]<- 3
  cluster_assign[71:75] <- 1
  cluster_assign <- rep(c(rep(1,10),rep(2,10), rep(3,10)),5)
  ###################################################
  #cluster_assign <- a
  t_matrix <- matrix(nrow = all_member, ncol = n_total)
  x_square <- sum(data_x^2)
  y_square <- sum(data_y^2)
  alpha <- .1
  beta <- alpha * y_square / (alpha * y_square + (1-alpha) * x_square)
  #beta <- 0.1

  loss_p_all <- rep(NA, iteration)
  loss_t_all <- 0
  loss_t_all_1 <- list()
  px <- list()

  for(k in 1:n_cluster){
    loss_t_all_1[[k]] <- rep(NA, iteration)
    cluster_k <- which(cluster_assign == k)
    data_x_k <- data_x[cluster_k, ]
    data_x_k_c <- MatrixCenter(data_x_k, 1, 0)
    data_y_k <- data_y[cluster_k]
    data_y_k_c <- data_y[cluster_k] - mean(data_y[cluster_k])
    svd_data <- svds(data_x_k_c, n_total)
    t_k <- svd_data$u
    loss_min <- upper

    for (v in 1:iteration){
      if(loss_min < converge & v > 20)  break
      if (v == 1){
        px[[k]] <- t(data_x_k_c) %*% t_k
        px[[k]][distinct_zeros] <- 0
      }
      reg_results <- lm(data_y_k_c~t_k-1)
      py[[k]] <- reg_results$coefficients
      t_new <- t_k
      for(i in 1:length(cluster_k)){
        #update_i <- which(cluster_k == i)
        q <- py[[k]]
        yi <- data_y_k_c[i]
        ti <- t(inv(beta * q %*% t(q) - q %*% t(q) - beta * t(px[[k]]) %*% px[[k]]) %*% t((beta*yi*t(q) - yi*t(q) - beta * data_x_k_c[i,] %*% px[[k]])))
        t_new[i,] <- ti
      }

      t.de <- svd(t_new)
      t_new_ortho <-  t.de$u %*% t(t.de$v)
      t_k <- t_new_ortho

      px[[k]] <- t(data_x_k_c) %*% t_k
    #pp <- px
      px[[k]][distinct_zeros] <- 0
      loss_t <- beta * sum((data_x_k_c - t_k %*% t(px[[k]]))^2)
      loss_t_all_1[[k]][v] <- loss_t

      if(v>1){
        loss_min <- loss_t_all_1[[k]][v-1] -loss_t_all_1[[k]][v]
      }
    }
    t_matrix[cluster_k,] <- t_k
    loss_t_all <- loss_t_all + loss_t
  }

  #loss_t_all_1[[3]][1:10]
    #for(k in 1:n_cluster){
    #  cluster_k <- which(cluster_assign == k)
    #  t_k <- t[cluster_k,]
    #  y_k <- data_y[cluster_k]-mean(data_y[cluster_k])
    ##  reg_results <- lm(y_k~t_k-1)
    #  py[[k]] <- reg_results$coefficients
    #  loss_k <- (1-beta) * sum(reg_results$residuals^2)
    #  loss_t <- loss_t+loss_k
    #  loss_t_all_1[v] <- loss_t_all_1[v] + loss_k
    #}
    #loss_t_all[v] <- loss_t
  #}

  #stop <- 0
  #iter_all <- 0
  #while(stop ==0){

   # iter_all <- iter_all + 1
    member_exchange <- 0
    loss_n_all <- list()
    for(n in 1:75){#:10){#length(cluster_assign)){
      #loss_n <- rep(NA, n_cluster)
      loss_n_all[[n]] <- rep(NA, n_cluster)
      ## get the cluster membership
      cluster_n <- cluster_assign[n]
      cluster_assign_temp <- cluster_assign
      #data_x_n <- data_x[-n,]
      #data_y_n <- data_y[-n]
      #t_n <- t[-n,]
      #cluster_assign_n <- cluster_assign[-n]
      py_temp <- list()
      px_temp <- list()
      t_temp <- list()

      for(g in 1:n_cluster){
        if (g == cluster_n){
          py_temp[[g]] <- py
          px_temp[[g]] <- px
          t_temp[[g]] <- t_matrix
          ##################
          #px <- t(data_x) %*% t
          #px[distinct_zeros] <- 0
          #loss_t <- beta * sum((data_x - t %*% t(px))^2)
          #for(k in 1:n_cluster){
          #  cluster_k <- which(cluster_assign == k)
          #  t_k <- t[cluster_k,]
          #
           # y_k <- data_y[cluster_k] - mean(data_y[cluster_k])

            #reg_results <- lm(y_k~t_k-1)
            #py[[k]] <- reg_results$coefficients
            #loss_k <- (1-beta) * sum(reg_results$residuals^2)
            #loss_t <- loss_t+loss_k
          #}
          loss_n_all[[n]][g] <- loss_t_all
        }
        if(g != cluster_n){
          cluster_assign_temp[n] <- g
          py_temp[[g]] <- list()
          px_temp[[g]] <- list()
          t_temp[[g]] <- matrix(nrow = nrow(t_matrix), ncol = ncol(t_matrix))
          loss_n_all[[n]][g] <- 0
          for(k in 1:n_cluster){
            loss_t_all_1[[k]] <- rep(NA, iteration)
            cluster_k <- which(cluster_assign_temp == k)
            data_x_k <- data_x[cluster_k, ]
            data_x_k_c <- MatrixCenter(data_x_k, 1, 0)
            data_y_k <- data_y[cluster_k]
            data_y_k_c <- data_y[cluster_k] - mean(data_y[cluster_k])
            t_k <- t_matrix[cluster_k,]
            loss_min <- upper

            for (v in 1:iteration){
              if(loss_min < converge & v > 20)  break
              if (v == 1){
                px_temp[[g]][[k]] <- t(data_x_k_c) %*% t_k
                px_temp[[g]][[k]][distinct_zeros] <- 0
              }
              reg_results <- lm(data_y_k_c~t_k-1)
              py_temp[[g]][[k]] <- reg_results$coefficients
              t_new <- t_k
              for(i in 1:length(cluster_k)){
                #update_i <- which(cluster_k == i)
                q <- py_temp[[g]][[k]]
                yi <- data_y_k_c[i]
                ti <- t(inv(beta * q %*% t(q) - q %*% t(q) - beta * t(px_temp[[g]][[k]]) %*% px_temp[[g]][[k]]) %*% t((beta*yi*t(q) - yi*t(q) - beta * data_x_k_c[i,] %*% px_temp[[g]][[k]])))
                t_new[i,] <- ti
              }

              t.de <- svd(t_new)
              t_new_ortho <-  t.de$u %*% t(t.de$v)
              t_k <- t_new_ortho

              px_temp[[g]][[k]] <- t(data_x_k_c) %*% t_k
              #pp <- px
              px_temp[[g]][[k]][distinct_zeros] <- 0
              loss_t <- beta * sum((data_x_k_c - t_k %*% t(px_temp[[g]][[k]]))^2)
              loss_t_all_1[[k]][v] <- loss_t

              if(v>1){
                loss_min <- loss_t_all_1[[k]][v-1] -loss_t_all_1[[k]][v]
              }
            }
            t_temp[[g]][cluster_k,] <- t_k
            loss_n_all[[n]][g] <- loss_n_all[[n]][g] + loss_t
          }
        }
      }

        cluster_assign[n] <- which(loss_n_all[[n]] == min(loss_n_all[[n]]))
        g <- cluster_assign[n]
        py <- py_temp[[g]]
        px <- px_temp[[g]]
        t_matrix <- t_temp[[g]]
        loss_t_all <- min(loss_n_all[[n]])
        if(cluster_assign[n] != cluster_n){
          member_exchange <- 1
        }
    }
    #if (member_exchange == 0){
    #  stop <- 1
    #}
    #if (iter_all > 100){
    #  stop <- 1
    #}
  #}





########################################
  ########################
      if (cluster_assign[n] != cluster_n){
        member_exchange <- 1
        #### the update of all elements
        loss_min <- upper
        loss_p_all <- rep(NA, iteration)
        loss_t_all <- rep(NA, iteration)
        for (v in 1:iteration){
          if(loss_min < converge)  break
          loss_new <- rep(NA, all_member)
          px <- t(data_x) %*% t
          px[distinct_zeros] <- 0
          #index.nsmallest <- sort(px^2, index.return = TRUE)$ix[1:(sparse_zeros+length(distinct_zeros))]
          #px[index.nsmallest] <- 0
          if(v > 1){
            loss_p <- beta * sum((data_x - t %*% t(px))^2)
            for(k in 1:n_cluster){
              cluster_k <- which(cluster_assign == k)
              t_k <- t[cluster_k,]
              y_k <- data_y[cluster_k]
              loss_k <- (1-beta) * sum((y_k-(cbind(rep(1, nrow(t_k)), t_k)%*%py[[k]]))^2)
              loss_p <- loss_p+loss_k
            }
            loss_p_all[v] <- loss_p
          }

          t_new <- t
          for(k in 1:n_cluster){
            cluster_k <- which(cluster_assign == k)
            t_k <- t[cluster_k,]
            y_k <- data_y[cluster_k]
            reg_results <- lm(y_k~t_k)
            py[[k]] <- reg_results$coefficients
            for(i in 1:length(cluster_k)){
              update_i <- cluster_k[i]
              q <- py[[k]][-1]
              yi <- data_y[update_i] - py[[k]][1]
              ti <- t(inv(beta * q %*% t(q) - q %*% t(q) - beta * t(px) %*% px) %*% t((beta*yi*t(q) - yi*t(q) - beta * data_x[update_i,] %*% px)))
              t_new[update_i,] <- ti
            }
          }

          t.de <- gramSchmidt(t_new)
          t <- t.de$Q

          px <- t(data_x) %*% t
          px[distinct_zeros] <- 0
          loss_t <- beta * sum((data_x - t %*% t(px))^2)
          for(k in 1:n_cluster){
            cluster_k <- which(cluster_assign == k)
            t_k <- t[cluster_k,]
            y_k <- data_y[cluster_k]
            reg_results <- lm(y_k~t_k)
            py[[k]] <- reg_results$coefficients
            loss_k <- (1-beta) * sum((y_k-(cbind(rep(1, nrow(t_k)), t_k)%*%py[[k]]))^2)
            loss_t <- loss_t+loss_k
          }
          loss_t_all[v] <- loss_t

          if(v>1){
            loss_min <- loss_t_all[v-1] -loss_t_all[v]
          }
        }
      }
    }


  #cluster_assign <- cluster_assign_new

  #}




    member_exchange <- 0
    iter <- iter + 1




      #if(n == 1){
      #  t_new_all <- rbind(t[n,], t_new)
      #}
      #if(n == n_observation){
      #  t_new_all <- rbind(t_new, t[n,])
      #}
      #if(n != 1 & n != n_observation){
      #  t_new_all <- rbind(t_new[1:(n-1),], t[n,], t_new[(n+1):nrow(t_new),])
      #}

      #t.de <- svd(t_new_all)
      #t_new_ortho <-  t.de$u %*% t(t.de$v)
      #t <- t_new_ortho


    if (member_exchange == 0){
      stop <- 1
    }
    if (iter == iteration){
      stop <- 1
    }
    #### the final update
    loss_min <- upper
    loss_p_all <- rep(NA, iteration)
    loss_t_all <- rep(NA, iteration)
    for (v in 1:iteration){
      if(loss_min < converge)  break
      loss_new <- rep(NA, all_member)
      px <- t(data_x) %*% t
      px[distinct_zeros] <- 0
      index.nsmallest <- sort(px^2, index.return = TRUE)$ix[1:(sparse_zeros+length(distinct_zeros))]
      px[index.nsmallest] <- 0
      if(v > 1){
        loss_p <- beta * sum((data_x - t %*% t(px))^2)
        for(k in 1:n_cluster){
          cluster_k <- which(cluster_assign == k)
          t_k <- t[cluster_k,]
          y_k <- data_y[cluster_k]
          loss_k <- (1-beta) * sum((y_k-(cbind(rep(1, nrow(t_k)), t_k)%*%py[[k]]))^2)
          loss_p <- loss_p+loss_k
        }
        loss_p_all[v] <- loss_p
      }

      t_new <- t
      for(k in 1:n_cluster){
        cluster_k <- which(cluster_assign == k)
        t_k <- t[cluster_k,]
        y_k <- data_y[cluster_k]
        reg_results <- lm(y_k~t_k)
        py[[k]] <- reg_results$coefficients
        for(i in 1:length(cluster_k)){
          update_i <- cluster_k[i]
          q <- py[[k]][-1]
          yi <- data_y[update_i] - py[[k]][1]
          ti <- t(inv(beta * q %*% t(q) - q %*% t(q) - beta * t(px) %*% px) %*% t((beta*yi*t(q) - yi*t(q) - beta * data_x[update_i,] %*% px)))
          t_new[update_i,] <- ti
        }
      }

      t.de <- svd(t_new)
      t_new_ortho <-  t.de$u %*% t(t.de$v)
      t <- t_new_ortho

      loss_t <- beta * sum((data_x - t %*% t(px))^2)
      for(k in 1:n_cluster){
        cluster_k <- which(cluster_assign == k)
        t_k <- t[cluster_k,]
        y_k <- data_y[cluster_k]
        reg_results <- lm(y_k~t_k)
        py[[k]] <- reg_results$coefficients
        loss_k <- (1-beta) * sum((y_k-(cbind(rep(1, nrow(t_k)), t_k)%*%py[[k]]))^2)
        loss_t <- loss_t+loss_k
      }
      loss_t_all[v] <- loss_t

      if(v>1){
        loss_min <- loss_t_all[v-1] -loss_t_all[v]
      }
    }
  }
  results = list(cluster_assign = cluster_assign, loadings = px, reg_coef = py, loss = loss_t_all[length(loss_t_all)])
  return(results)
}
