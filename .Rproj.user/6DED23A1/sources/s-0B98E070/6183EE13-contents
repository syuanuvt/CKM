### shinyapp PlotBiVar
#basics
rm(list = ls())
library("shiny")
library("ggplot2")
library("colourpicker")


#download dataset
load("~/Desktop/traineeship 2/Shiny App/dataset_large.RData")

#input of the app
ui <- fluidPage(
  titlePanel("Scatterplot"),
  fluidRow(
    column(4,
        textInput(inputId="title", label="Title of the scatterplot:", placeholder="names of the two variables"),
        varSelectInput(inputId="x", label="Variable X-axis:", dataset),
        textInput(inputId="xaxis", label="Title of the X-axis:", placeholder="name of variable x"),
        varSelectInput(inputId="y", label="Variable Y-axis:", dataset),
        textInput(inputId="yaxis", label="Title of the Y-axis:", placeholder="name of variable y"),
        radioButtons(inputId="show_cluster", label = "Show the different clusters:", choiceNames = c("Yes", "No"), choiceValues = c("yes", "no")),
        radioButtons(inputId="file_type", label = "Select the file type:", choices=list("png", "pdf"))),
    column(8,
        plotOutput("data"),
        textOutput("title"),
        downloadButton('download_plot', 'Download the plot'))
    ),
  fluidRow(
    column(12,
    conditionalPanel(condition = "input.show_cluster == 'yes'",
       fluidRow(
          column(12,
             textInput(inputId="title_legend", label="Title of the legend:", placeholder="Clusters:")
          )
       ),
       fluidRow(
          column(3, offset=0,
              textInput(inputId="cluster1_name", label="Name of cluster 1:", placeholder="Cluster 1"),
              colourInput(inputId="cluster1_color", label="Color of cluster 1:", value="lightpink", showColour="background", closeOnClick=TRUE)),
          column(3,
              textInput(inputId="cluster2_name", label="Name of cluster 2:", placeholder="Cluster 2"),
              colourInput(inputId="cluster2_color", label="Color of cluster 2:", value="steelblue", showColour="background", closeOnClick=TRUE)),
          column(3,
              textInput(inputId="cluster3_name", label="Name of cluster 3:", placeholder="Cluster 3"),
              colourInput(inputId="cluster3_color", label="Color of cluster 3:", value="palegreen1", showColour="background", closeOnClick=TRUE))
       )
    )
    )
  )
)

#output of the app
server <- function(input, output){
  output$data <- renderPlot({
    if(input$show_cluster == "yes") {
      ggplot(dataset, aes(x = !!input$x, y = !!input$y)) + 
        geom_point(aes(colour=as.factor(cluster)), size=6) +
        scale_colour_manual(labels = c(input$cluster1_name, input$cluster2_name, input$cluster3_name), values= c(input$cluster1_color, input$cluster2_color, input$cluster3_color)) +
        labs(title= input$title, colour=input$title_legend, x=input$xaxis, y=input$yaxis) +
        theme(title = element_text(size = 30), 
              axis.title = element_text(size=20),
              axis.text = element_text(size = 16),
              legend.text = element_text(size = 16))}
    else {
      ggplot(dataset, aes(x = !!input$x, y = !!input$y)) + 
        geom_point(size=6) +
        labs(title= input$title, x=input$xaxis, y=input$yaxis) +
        theme(title = element_text(size = 30), 
              axis.title = element_text(size=20),
              axis.text = element_text(size = 16))}
  })
  output$download_plot <- downloadHandler(
    filename = function(){
      paste("PlotCoord", input$title, input$file_type, sep=".")},
    content = function(file){
      ggsave(file, plot = last_plot(), device = NULL, width=40, height=20, units="cm")}
  )
}

#connection for the app
shinyApp(ui=ui, server=server)

