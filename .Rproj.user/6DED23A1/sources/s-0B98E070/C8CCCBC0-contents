#### examine the novel variable selection methods in k-means
library(sparcl)
library(rARPACK)
library(combinat)
library(mclust)
library(dplyr)
library("BiocManager")
#BiocManager::install("Biobase")
library(Biobase)
library(doParallel)
library(mclust)
library(clustrd)
library(cluster)
library(remotes)
#install.packages("RSpectra")
library(GGally)
library(CKM)
library(fpc)
library(NbClust)
##################################################################################
#Sys.setenv(R_REMOTES_NO_ERRORS_FROM_WARNINGS="true")
#remotes::install_github("syuanuvt/CKM")
##################################################################################
### Simulation 1

##################################################################################
### the hill climbing methdos (not developed by us)
withinss = function(X,G,K){
  if(is.vector(X) && is.atomic(X)){
    group = list()
    wcss = 0
    for(j in 1:K){
      group[[j]] = which(G == j)
      l = length(group[[j]])
      if(l>1){
        wcss = wcss + var(X[group[[j]]])*(l-1)
      }
    }
  } else if (is.matrix(X)){
    group = list()
    wcss = 0
    for(j in 1:K){
      group[[j]] = which(G == j)
      l = length(group[[j]])
      if(l>1){
        wcss = wcss + sum(apply(X[group[[j]],],2,var)*(l-1))
      }
    }
  } else {
    cat("X is niether a vector nor a matrix! \n")
    return(NULL)
  }

  return(wcss)
}

Alternate= function(X, k,tot, initial_set, s, itermax, threshold){
  p = dim(X)[2]
  set0 = initial_set
  set1 = c(0)
  iternum = 0
  while(iternum<= itermax && length(setdiff(set1,set0)) + length(setdiff(set0,set1)) > threshold ){
    clustering = kmeans(X[,set0],iter.max = 500, centers=k,algorithm = "Hartigan-Wong",trace = 0,nstart=10)
    result = clustering$cluster

    wcss = apply(X,2,withinss,G = result, K = k)
    iternum = iternum + 1

    set1 = set0
    set0 = which(rank((tot-wcss)/tot,ties.method = "random") > p-s)
  }
  out = list(final_set = set0, iternum = iternum, result = result, betweenss = clustering$betweenss)
  return(out)
}

#compute within-cluster distance by clustering feature by feature, select S of size s based on this
hill_climb = function(X,k,s,itermax,threshold,tolerance){
  X = scale(X)
  n = dim(X)[1]
  p = dim(X)[2]
  tot = apply(X,2,var)*(n-1)
  wcss = rep(0,p)
  for(j in 1:p){
    clustering = kmeans(X[,j],iter.max = 500, centers = k,algorithm = "Hartigan-Wong", trace = 0, nstart = 5)
    wcss[j] = clustering$tot.withinss
  }
  rank0 = rank((tot-wcss)/tot,ties.method = "random")

  initial_set = which(rank0 > s)
  out = Alternate(X, k,tot, initial_set, s, 2*itermax, threshold)
  output = list(final_set = out$final_set, result = out$result, s = s)
  return(output)
}
###########################################################################################################
##############Simulation 1: test CKM itself and the other two methods #####################################
###########################################################################################################
set.seed(970912)
n.cluster <- c(3,5,30)
n.noisevar <- c(5,50,250,1000)
var <- 1
n.validvar <- 50
nmu <- c(0.6,0.7,0.8,1)

con.rep <- 1:40
## for the gap statistics
n.rep <- 20
condition0 <- expand.grid(ncluster = n.cluster, nnoisevar= n.noisevar, nvalidvar = n.validvar,
                          nmu = nmu, rep = con.rep)
setwd("//tsclient/C/Users/Shuai Yuan/Documents/CKM_new/CKM_revision/sim1_new")
#nonexist <- c()
#for(i in 1:nrow(condition0)){
#  if(!file.exists(paste0(i,".RData"))){
#    nonexist <- c(i, nonexist)
#  }
#}
#setwd("C:/Users/Shuai Yuan/Documents/CKM_1/data analysis/sim1_1")
#setwd("M:/JCDR sim/sim0.new")
#setwd("C:/Users/u1275970/Documents/JCDR/CKM/sim0.new")
# run the script with multi-core systems
set.seed(970912)
no_cores <- 30
#no_cores <- 2
c1 <- makePSOCKcluster(no_cores)
registerDoParallel(c1)
## from iteration 1576, we start recording the time
# to store the final results (including congruence between the simulation loading matrics, ARI of iCluster(which could already been obtained here),
# ARI of iCluster, and the congruence between obtained loading matrics and simulatd loading matrices)
sim0_data <- foreach(h = 1:nrow(condition0),
                     .packages = c("mclust", "combinat", "sparcl",
                                   "rARPACK", "Biobase", "CKM", "RSpectra", "cluster"
                     ), .combine=rbind) %dopar%{

                       #time.start <- proc.time()
                       #if(!file.exists(paste0(h, ".RData"))){

                       n.cluster <- condition0$ncluster[h]
                       n.obs <- n.cluster * 50
                       n.noisevar <- condition0$nnoisevar[h]
                       n.validvar <- condition0$nvalidvar[h]
                       mu <- condition0$nmu[h]

                       n.totalvar <- n.noisevar + n.validvar

                       sim.data <- DataGenCKM(n.obs, n.cluster, n.validvar, n.noisevar, mu, var)
                       dataset <- sim.data$data
                       cluster.assign <- sim.data$cluster.assign

                       ##############################################
                       out <- list()
                       prc1 <- proc.time()
                       results <- CKMSelNo(dataset, n.cluster, n.noisevar)
                       classError(results$cluster.assign, cluster.assign)
                       use.time <- proc.time() - prc1
                       prc2 <- proc.time()
                       results2 <- hill_climb(dataset, n.cluster, n.validvar, itermax=100,threshold=0,tolerance=1)
                       classError(results2$result, cluster.assign)
                       use.time2 <- proc.time() - prc2
                       prc3 <- proc.time()
                       number <- 0
                       flag <- 0
                       if(n.cluster != 30){
                       while(number < 3 & flag == 0){
                         number <- number + 1
                         results3 <- try(KMeansSparseCluster.permute(dataset, K = n.cluster, wbounds = seq(1.001,10,len= 200), nperms=n.rep))
                        if(!inherits(results3, "try-error"))
                        {
                          flag <- 1

                          if(sum(results3$nnonzerows == n.validvar) > 0){
                            select.wbound <- results3$wbounds[which(results3$nnonzerows == n.validvar)]
                            mean.wbound <- mean(select.wbound)
                            results3.plus <- KMeansSparseCluster(dataset, K = n.cluster, wbounds = mean.wbound, nstart = 1000)
                            records3 <- classError(cluster.assign, results3.plus[[1]]$Cs)[[2]]
                            signaling.set <- which(results3.plus[[1]]$ws != 0)
                          }

                          if(sum(results3$nnonzerows == n.validvar) == 0){

                            left <- sort(which(results3$nnonzerows < n.validvar), decreasing = TRUE)[1]
                            right <- left + 1
                            mean.wbound <- mean(results3$wbounds[c(left,right)])
                            results3.plus <- KMeansSparseCluster(dataset, K = n.cluster, wbounds = mean.wbound, nstart = 1000)
                            records3 <- classError(cluster.assign, results3.plus[[1]]$Cs)[[2]]
                            signaling.set <- which(results3.plus[[1]]$ws != 0)
                          }
                        }

                         if(inherits(results3, "try-error"))
                         {
                           records3 <- NA
                           out[[3]] <- NA
                         }
                       }
                       }
                       use.time3  <- proc.time() - prc3

                       records <- classError(cluster.assign, results$cluster.assign)[[2]]
                       records2 <- classError(cluster.assign, results2$result)[[2]]

                       # the current method
                       out[[1]] <- list(value = records, time = use.time[1], signaling.set = results$signaling.set)
                       out[[2]] <- list(value = records2, time = use.time2[1], signaling.set = results2$final_set)
                       if(flag == 1){
                         out[[3]] <- list(value = records3, time = use.time3[1], signaling.set = signaling.set)
                       }
                       out[[4]] <- 1:n.validvar
                       save(out, file = paste0(h, ".RData"))
                     }

stopCluster(c1)
