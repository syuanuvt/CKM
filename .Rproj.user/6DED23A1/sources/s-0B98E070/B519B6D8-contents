#shiny app PlotLD
#basics
rm(list = ls())
library("shiny")
library("ggplot2")
library("colourpicker")
library("ggfortify")
library("tsne")

#download dataset
load("~/Desktop/traineeship 2/Shiny App/dataset_large.RData")

##### NEED TO FIX THE CLUSTER LABELING FOR PCA

#input of the app
ui <- fluidPage(
  titlePanel("Lower-dimensional summarization of the clusters"),
  fluidRow(
    column(4,ofsett=0,
           textInput(inputId="title", label="Title of the plot:", placeholder="lower-dimensional summarization of the clusters"),
           radioButtons(inputId="summarization_type", label = "Dimension reductio method:", choiceNames = c("Principal component analysis", "t-distrubuted stochastic neighbor embedding"), choiceValues = c("PCA", "TSNE")),
           radioButtons(inputId="case_names", label = "Show the case names:", choiceNames = c("Yes", "No"), choiceValues = c("yes", "no")),
           radioButtons(inputId="show_cluster", label = "Show the different clusters:", choiceNames = c("Yes", "No"), choiceValues = c("yes", "no")),
           radioButtons(inputId="file_type", label = "Select the file type:", choices = list("png", "pdf"))
    ),
    column(8,
           textOutput("title_LD"),
           plotOutput("LD"),
           downloadButton('download_LD', 'Download the plot')
    )
  ),
  fluidRow(
    column(12,
           conditionalPanel(condition = "input.show_cluster == 'yes'",
                            fluidRow(
                              column(12,
                                     textInput(inputId="title_legend", label="Title of the legend:", placeholder="Clusters:")
                              )
                            ),
                            fluidRow(
                              column(3, offset=0,
                                     textInput(inputId="cluster1_name", label="Name of cluster 1:", placeholder="Cluster 1"),
                                     colourInput(inputId="cluster1_color", label="Color of cluster 1:", value="lightpink", showColour="background", closeOnClick=TRUE)),
                              column(3,
                                     textInput(inputId="cluster2_name", label="Name of cluster 2:", placeholder="Cluster 2"),
                                     colourInput(inputId="cluster2_color", label="Color of cluster 2:", value="steelblue", showColour="background", closeOnClick=TRUE)),
                              column(3,
                                     textInput(inputId="cluster3_name", label="Name of cluster 3:", placeholder="Cluster 3"),
                                     colourInput(inputId="cluster3_color", label="Color of cluster 3:", value="palegreen1", showColour="background", closeOnClick=TRUE)),
                            )
           )
    )
  )
)

server <- function(input, output){
  output$LD <- renderPlot({
    n.cluster <- length(unique(dataset$cluster))
    n.sig <- ncol(dataset)-1
    n.obs <- nrow(dataset)
    dataset$cluster <- as.factor(dataset$cluster)
    cluster.assign <- dataset$cluster
    new.data <- as.data.frame(dataset[,-(n.sig+1)])
    
    if (input$summarization_type == "PCA") {
      if (input$show_cluster == "yes") {
        pc_data <- prcomp(new.data)
        autoplot(pc_data, data = dataset, colour = "cluster", size=6) +
          scale_colour_manual(labels = c(input$cluster1_name, input$cluster2_name, input$cluster3_name), values= c(input$cluster1_color, input$cluster2_color, input$cluster3_color)) +      
          labs(title= input$title, colour=input$title_legend) +
          theme(title = element_text(size = 30), 
                axis.title = element_text(size=20),
                axis.text = element_text(size = 16),
                legend.text = element_text(size = 16))
        }
      else if (input$show_cluster == "no") {
        pc_data <- prcomp(new.data)
        autoplot(pc_data, data = dataset, size=6) +
          labs(title= input$title) +
          theme(title = element_text(size = 30), 
                axis.title = element_text(size=20),
                axis.text = element_text(size = 16))
      }
    }
    
    else if (input$summarization_type == "TSNE"){
      perp <- floor((nrow(new.data)-1)/3)
      tsne_data <- tsne(as.matrix(new.data), perplexity = perp)
      tsne_integration <- as.data.frame(cbind(tsne_data, cluster.assign))
      names(tsne_integration) <- c("Dim1", "Dim2", "cluster")
      tsne_integration$cluster <- as.factor(as.character(tsne_integration$cluster))
      if (input$show_cluster == "yes") {
        if (input$case_names == "yes") {
          ggplot(tsne_integration, aes(x=Dim1, y=Dim2, color=cluster)) +
            geom_point(size=1) +
            scale_colour_manual(labels = c(input$cluster1_name, input$cluster2_name, input$cluster3_name), values= c(input$cluster1_color, input$cluster2_color, input$cluster3_color)) +        
            labs(title= input$title, colour=input$title_legend) +
            theme(title = element_text(size = 30), 
                  axis.title = element_text(size=20),
                  axis.text = element_text(size = 16),
                  legend.text = element_text(size = 16))+
            geom_text(
              label=rownames(tsne_integration),
              nudge_x = 0.25, nudge_y = 0.25,
              check_overlap = T,
              size=5)
        }
        else if (input$case_names =="no") {
          ggplot(tsne_integration, aes(x=Dim1, y=Dim2, color=cluster)) +
            geom_point(size=6) +
            scale_colour_manual(labels = c(input$cluster1_name, input$cluster2_name, input$cluster3_name), values= c(input$cluster1_color, input$cluster2_color, input$cluster3_color)) +        
            labs(title= input$title, colour=input$title_legend) +
            theme(title = element_text(size = 30), 
                  axis.title = element_text(size=20),
                  axis.text = element_text(size = 16),
                  legend.text = element_text(size = 16))
        }
      }
      else if (input$show_cluster == "no") {
        if (input$case_names == "yes") {
          ggplot(tsne_integration, aes(x=Dim1, y=Dim2)) +
            geom_point(size=1) +
            labs(title= input$title) +
            theme(title = element_text(size = 30), 
                  axis.title = element_text(size=20),
                  axis.text = element_text(size = 16)) +
            geom_text(
              label=rownames(tsne_integration),
              nudge_x = 0.25, nudge_y = 0.25,
              check_overlap = T,
              size=5)   
        }
        else if (input$case_names == "no") {
          ggplot(tsne_integration, aes(x=Dim1, y=Dim2)) +
            geom_point(size=6) +
            labs(title= input$title) +
            theme(title = element_text(size = 30), 
                  axis.title = element_text(size=20),
                  axis.text = element_text(size = 16))
        }
      }
    }
  })
  
  output$download_LD <- downloadHandler(
    filename = function(){
      paste("LD", input$title, input$file_type, sep=".")},
    content = function(file){
      ggsave(file, plot = last_plot(), device = NULL, width=40, height=20, units="cm")}
    )
}

shinyApp(ui=ui, server=server)