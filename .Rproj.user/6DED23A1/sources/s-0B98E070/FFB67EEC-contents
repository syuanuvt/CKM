##################################################
#### computational code for three simulations ####
##################################################
##################################################################################
Sys.setenv(R_REMOTES_NO_ERRORS_FROM_WARNINGS="true")
remotes::install_github("syuanuvt/CKM")
##################################################################################
library(sparcl)
library(rARPACK)
library(combinat)
library(mclust)
library(dplyr)
library(Biobase)
library(doParallel)
library(mclust)
library(clustrd)
library(cluster)
library(remotes)
library(GGally)
library(CKM)
library(fpc)
library(NbClust)

### Simulation 1
##################################################################################
### the hill climbing methdos (not developed by us)
withinss = function(X,G,K){
  if(is.vector(X) && is.atomic(X)){
    group = list()
    wcss = 0
    for(j in 1:K){
      group[[j]] = which(G == j)
      l = length(group[[j]])
      if(l>1){
        wcss = wcss + var(X[group[[j]]])*(l-1)
      }
    }
  } else if (is.matrix(X)){
    group = list()
    wcss = 0
    for(j in 1:K){
      group[[j]] = which(G == j)
      l = length(group[[j]])
      if(l>1){
        wcss = wcss + sum(apply(X[group[[j]],],2,var)*(l-1))
      }
    }
  } else {
    cat("X is niether a vector nor a matrix! \n")
    return(NULL)
  }

  return(wcss)
}

Alternate= function(X, k,tot, initial_set, s, itermax, threshold){
  p = dim(X)[2]
  set0 = initial_set
  set1 = c(0)
  iternum = 0
  while(iternum<= itermax && length(setdiff(set1,set0)) + length(setdiff(set0,set1)) > threshold ){
    clustering = kmeans(X[,set0],iter.max = 100, centers=k,algorithm = "Hartigan-Wong",trace = 0,nstart=10)
    result = clustering$cluster

    wcss = apply(X,2,withinss,G = result, K = k)
    iternum = iternum + 1

    set1 = set0
    set0 = which(rank((tot-wcss)/tot,ties.method = "random") > p-s)
  }
  out = list(final_set = set0, iternum = iternum, result = result, betweenss = clustering$betweenss)
  return(out)
}

#compute within-cluster distance by clustering feature by feature, select S of size s based on this
hill_climb = function(X,k,s,itermax,threshold,tolerance){
  X = scale(X)
  n = dim(X)[1]
  p = dim(X)[2]
  tot = apply(X,2,var)*(n-1)
  wcss = rep(0,p)
  for(j in 1:p){
    clustering = kmeans(X[,j],iter.max = 500, centers = k,algorithm = "Hartigan-Wong", trace = 0)
    wcss[j] = clustering$tot.withinss
  }
  rank0 = rank((tot-wcss)/tot,ties.method = "random")

  initial_set = which(rank0 > s)
  out = Alternate(X, k,tot, initial_set, s, 2*itermax, threshold)
  output = list(final_set = out$final_set, result = out$result, s = s)
  return(output)
}
##################################
##################################
##################################
#####################################################
set.seed(970912)
n.cluster <- c(3,5,30)
n.noisevar <- c(5,50,250,1000)
var <- 1
n.rep <- 20
n.validvar <- 50
nmu <- c(0.6,0.7,0.8,1)
con.rep <- 1:40
#condition1 <- expand.grid(nobs = n.obs, nnoisevar= n.noisevar, nmu = nmu, rep = con.rep)
condition1 <- expand.grid(ncluster = n.cluster, nnoisevar= n.noisevar, nvalidvar = n.validvar,
                          nmu = nmu, rep = con.rep)
setwd("E:/Users/u1275970/Documents/CKM/sim2_3")
#setwd("//tsclient/C/Users/Shuai Yuan/Documents/CKM_new/CKM_revision/sim1")
#setwd("C:/Users/Shuai Yuan/Documents/CKM_1/data analysis/sim2_add")
#setwd("C:/Users/u1275970/Documents/JCDR/CKM/sim1.new")

# run the script with multi-core systems
no_cores <- 30
#no_cores <- 2
c1 <- makePSOCKcluster(no_cores)
registerDoParallel(c1)
## from iteration 1576, we start recording the time
# to store the final results (including congruence between the simulation loading matrics, ARI of iCluster(which could already been obtained here),
# ARI of iCluster, and the congruence between obtained loading matrics and simulatd loading matrices)
sim1_data <- foreach(h = 1:nrow(condition1),
                     .packages = c("mclust", "combinat", "multichull",
                                   "sparcl",   "rARPACK", "Biobase", "CKM", "RSpectra", "cluster"
                     ), .combine=rbind) %dopar%{

                       #time.start <- proc.time()
                       #if(!file.exists(paste0(h, ".RData"))){
                       #n.obs <- condition1$nobs[h]
                       n.cluster <- condition1$ncluster[h]
                       n.obs <- n.cluster * 50
                       n.noisevar <- condition1$nnoisevar[h]
                       mu <- condition1$nmu[h]
                       n.totalvar <- n.noisevar + n.validvar
                       records <- matrix(nrow = 3, ncol = 4)

                       sim.data <- DataGenCKM(n.obs, n.cluster, n.validvar, n.noisevar, mu, var)
                       dataset <- sim.data[[1]]
                       cluster.assign <- sim.data[[2]]
                       valid.set <- 1:n.validvar
                       ##############################################
                       valid.set.test <- list()
                       ##############################################
                       prc1 <- proc.time()
                       results <- try(CKMSelVar_a(dataset, n.cluster))
                       a <- proc.time() - prc1

                       if(inherits(results, "try-error"))
                       {
                         records[3,1] <- NA
                         records[2,1] <- NA
                         records[1,1] <- NA
                         valid.set.test[[1]] <- NA
                       }
                       if(!inherits(results, "try-error"))
                       {
                         records[3,1] <- a[1]
                         records[2,1] <- length(results$signaling.set)
                         records[1,1] <- classError(cluster.assign, results$cluster.assign)[[2]]
                         valid.set.test[[1]] <- results$signaling.set
                       }

                       prc2 <- proc.time()
                       results.gss <- hill_climb_GSS(dataset, n.cluster, nperms=n.rep,itermax=500,threshold=0,tolerance=1)
                       a <- proc.time() - prc2

                       records[3,2] <- a[1]
                       records[2,2] <- length(results.gss$final_set)
                       records[1,2] <- classError(cluster.assign, results.gss$result)[[2]]
                       valid.set.test[[2]] <- results.gss$final_set

                       ################################################
                       ############################################
                       prc4 <- proc.time()
                       kmeans.results <- kmeans(dataset, n.cluster, nstart = n.rep)
                       a <- proc.time() - prc4
                       records[3,4] <- a[1]
                       records[2,4] <- ncol(dataset)
                       records[1,4] <- classError(cluster.assign, kmeans.results$cluster)[[2]]
                       valid.set.test[[4]] <- 1:ncol(dataset)
                       ###########################################
                       #prc5 <- proc.time()
                       #results.rkm <- cluspca(dataset, n.cluster, n.cluster, alpha = NULL, method = "RKM")
                       #a <- proc.time() - prc5
                       #records[3,5] <- a[1]
                       #records[2,5] <- ncol(dataset)
                       #records[1,5] <- classError(cluster.assign, results.rkm$cluster)[[2]]
                       #valid.set.test[[5]] <- 1:ncol(dataset)

                       results <- list(records = records, valid.set.test = valid.set.test, dataset = dataset)

                       save(results, file = paste0(h, ".RData"))
                     }

stopCluster(c1)
###########################################################################################################
##############Simulation 1: test CKM itself and the other two methods #####################################
###########################################################################################################
set.seed(970912)
n.cluster <- c(3,5,30)
n.noisevar <- c(5,50,250,1000)
var <- 1
n.validvar <- 50
nmu <- c(0.6,0.7,0.8,1)

con.rep <- 1:40
## for the gap statistics
n.rep <- 20
condition0 <- expand.grid(ncluster = n.cluster, nnoisevar= n.noisevar, nvalidvar = n.validvar,
                          nmu = nmu, rep = con.rep)
setwd("E:/Users/u1275970/Documents/CKM/sim1_2")
#nonexist <- c()
#for(i in 1:nrow(condition0)){
#  if(!file.exists(paste0(i,".RData"))){
#    nonexist <- c(i, nonexist)
#  }
#}
#setwd("C:/Users/Shuai Yuan/Documents/CKM_1/data analysis/sim1_1")
#setwd("M:/JCDR sim/sim0.new")
#setwd("C:/Users/u1275970/Documents/JCDR/CKM/sim0.new")
# run the script with multi-core systems
set.seed(970912)
no_cores <- 30
#no_cores <- 2
c1 <- makePSOCKcluster(no_cores)
registerDoParallel(c1)
## from iteration 1576, we start recording the time
# to store the final results (including congruence between the simulation loading matrics, ARI of iCluster(which could already been obtained here),
# ARI of iCluster, and the congruence between obtained loading matrics and simulatd loading matrices)
sim0_data <- foreach(h = 1:nrow(condition0),
                     .packages = c("mclust", "combinat", "sparcl",
                                   "rARPACK", "Biobase", "CKM", "RSpectra", "cluster"
                     ), .combine=rbind) %dopar%{

                       #time.start <- proc.time()
                       #if(!file.exists(paste0(h, ".RData"))){

                       n.cluster <- condition0$ncluster[h]
                       n.obs <- n.cluster * 50
                       n.noisevar <- condition0$nnoisevar[h]
                       n.validvar <- condition0$nvalidvar[h]
                       mu <- condition0$nmu[h]

                       n.totalvar <- n.noisevar + n.validvar

                       sim.data <- DataGenCKM(n.obs, n.cluster, n.validvar, n.noisevar, mu, var)
                       dataset <- sim.data$data
                       cluster.assign <- sim.data$cluster.assign

                       ##############################################
                       out <- list()
                       prc1 <- proc.time()
                       results <- CKMSelNo(dataset, n.cluster, n.noisevar)
                       results$signaling.set
                       use.time <- proc.time() - prc1
                       prc2 <- proc.time()
                       results2 <- hill_climb(dataset, n.cluster, n.validvar, itermax=100,threshold=0,tolerance=1)
                       results2$final_set
                       use.time2 <- proc.time() - prc2

                       records <- classError(cluster.assign, results$cluster.assign)[[2]]
                       records2 <- classError(cluster.assign, results2$result)[[2]]

                       # the current method
                       out[[1]] <- list(value = records, time = use.time[1], signaling.set = results$signaling.set)
                       out[[2]] <- list(value = records2, time = use.time2[1], signaling.set = results2$final_set)
                       out[[3]] <- 1:n.validvar
                       save(out, file = paste0(h, ".RData"))
                     }
#}

stopCluster(c1)
