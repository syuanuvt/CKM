xlab("Clusters")
}
plot.ckm <- function(ckm.object, var.ind = NULL){
n.noisevar <- ckm.object$n.noisevar
signaling.set <- ckm.object$signaling.set
cluster.assign <- ckm.object$cluster.assign
n.cluster <- ckm.object$opt.cluster
dataset <- ckm.object$org.data
new.data <- dataset[, signaling.set]
cluster.center <- matrix(nrow = n.cluster, ncol = length(signaling.set))
colnames(cluster.center) <- as.character(signaling.set)
for (i in 1:n.cluster){
if(sum(cluster.assign == i) != 1){
cluster.center[i,] <- apply(new.data[cluster.assign == i,], 2, mean)
}
if(sum(cluster.assign == i) == 1){
cluster.center[i,] <- new.data[cluster.assign == i,]
}
}
cluster.plot <- as.data.frame(t(cluster.center))
for (i in 1:n.cluster){
colnames(cluster.plot)[i] <- paste0("Cluster ", i)
}
if(is.null(var.ind)){
GGally::ggparcoord(cluster.plot, columns = 1:n.cluster,  scale = "globalminmax",
showPoints = TRUE, title = "Cluster Centroids", alphaLines = .3)+
scale_color_viridis(discrete = TRUE)+
ylab("Centroids") +
xlab("Clusters")
}
if(!is.null(var.ind)){
cluster.plot$group <- var.ind[signaling.set]
GGally::ggparcoord(cluster.plot, columns = 1:n.cluster, groupColumn = "group", scale = "globalminmax",
showPoints = TRUE, title = "Cluster Centroids", alphaLines = .3)+
scale_color_viridis(discrete = TRUE)+
ylab("Centroids") +
xlab("Clusters")
}
}
plot(ckm.object = results.ckm)
plot.ckm(ckm.object = results.ckm)
plot.ckm(results.ckm)
var.ind
library(GGally)
plot.ckm <- function(ckm.object, var.ind = NULL){
n.noisevar <- ckm.object$n.noisevar
signaling.set <- ckm.object$signaling.set
cluster.assign <- ckm.object$cluster.assign
n.cluster <- ckm.object$opt.cluster
dataset <- ckm.object$org.data
new.data <- dataset[, signaling.set]
cluster.center <- matrix(nrow = n.cluster, ncol = length(signaling.set))
colnames(cluster.center) <- as.character(signaling.set)
for (i in 1:n.cluster){
if(sum(cluster.assign == i) != 1){
cluster.center[i,] <- apply(new.data[cluster.assign == i,], 2, mean)
}
if(sum(cluster.assign == i) == 1){
cluster.center[i,] <- new.data[cluster.assign == i,]
}
}
cluster.plot <- as.data.frame(t(cluster.center))
for (i in 1:n.cluster){
colnames(cluster.plot)[i] <- paste0("Cluster ", i)
}
if(is.null(var.ind)){
GGally::ggparcoord(cluster.plot, columns = 1:n.cluster,  scale = "globalminmax",
showPoints = TRUE, title = "Cluster Centroids", alphaLines = .3)+
scale_color_viridis(discrete = TRUE)+
ylab("Centroids") +
xlab("Clusters")
}
if(!is.null(var.ind)){
cluster.plot$group <- var.ind[signaling.set]
GGally::ggparcoord(cluster.plot, columns = 1:n.cluster, groupColumn = "group", scale = "globalminmax",
showPoints = TRUE, title = "Cluster Centroids", alphaLines = .3)+
scale_color_viridis(discrete = TRUE)+
ylab("Centroids") +
xlab("Clusters")
}
}
plot(results.ckm)
plot.ckm(results.ckm)
?plot.ckm
class(results.ckm)
summary(results.ckm)
summary.ckm(results.ckm)
plot.ckm(results.ckm)
summary.ckm(results.ckm)
results.ckm$signaling.set
results.sas$result
results.sas$final_set
results.ckm <- CKMSelVar(autism.st, n.cluster = 2)
results.km <- kmeans(autism.st, centers = 2, nstart = n.rep)
results.sas <- hill_climb_GSS(X = autism.st, k = 2, nperms=n.rep,itermax=20,threshold=0,tolerance=1)
results.ckm
length(results.ckm$signaling.set)
length(hill_climb_GSS)
n.rep <- 20
set.seed(921009)
results.ckm <- CKMSelVar(autism.st, n.cluster = 2)
set.seed(921009)
results.km <- kmeans(autism.st, centers = 2, nstart = n.rep)
set.seed(921009)
results.sas <- hill_climb_GSS(X = autism.st, k = 2, nperms=n.rep,itermax=20,threshold=0,tolerance=1)
length(results.sas$final_set)
length(results.ckm$signaling.set)
### plot the results of CKM
plot.ckm(results.ckm)
ckm.object <- results.ckm
signaling.set <- ckm.object$signaling.set
cluster.assign <- ckm.object$cluster.assign
n.cluster <- ckm.object$opt.cluster
dataset <- ckm.object$org.data
new.data <- dataset[, signaling.set]
cluster.center <- matrix(nrow = n.cluster, ncol = length(signaling.set))
colnames(cluster.center) <- as.character(signaling.set)
for (i in 1:n.cluster){
if(sum(cluster.assign == i) != 1){
cluster.center[i,] <- apply(new.data[cluster.assign == i,], 2, mean)
}
if(sum(cluster.assign == i) == 1){
cluster.center[i,] <- new.data[cluster.assign == i,]
}
}
cluster.plot <- as.data.frame(t(cluster.center))
for (i in 1:n.cluster){
colnames(cluster.plot)[i] <- paste0("Cluster ", i)
}
ggparcoord(cluster.plot, columns = 1:n.cluster,  scale = "globalminmax",
showPoints = TRUE, title = "Cluster Centroids", alphaLines = .3)+
scale_color_viridis(discrete = TRUE)+
ylab("Centroids") +
xlab("Clusters")
### save the results
save(results.ckm, file = "results_ckm.RData")
gene
## the indices of signaling variables
signaling_set <- results.ckm$signaling.set
## the vector that represents the resulted cluster partition
cluster_assign <- results.ckm$cluster.assign
length(signaling_set)
gene.final
length(signaling_set)
useful.gene <- gene.final$GENE_SYMBOL[signaling_set]
write.csv(useful.gene, file = "useful.gene.csv")
getwd()
############## load the data set
setwd("C:/Users/Shuai Yuan/Documents/CKM_1/data analysis")
write.csv(useful.gene, file = "useful.gene.csv")
length(signaling_set)
length(results.sas$final_set)
library(CKM)
#### examine the novel variable selection methods in k-means
library(sparcl)
library(rARPACK)
library(combinat)
library(mclust)
library(dplyr)
library(bookdown)
#library("BiocManager")
#BiocManager::install("Biobase")
library(Biobase)
library(doParallel)
library(mclust)
library(clustrd)
library(cluster)
library(remotes)
#install.packages("RSpectra")
library(GGally)
library(CKM)
library(fpc)
library(NbClust)
sim.data <- DataGenCKM(1000,20,100,5,.5,1)
sim.data <- DataGenCKM(1000,20,100,5,.5,1)
dataset <- sim.data$data
cluster.assign <- sim.data$cluster.assign
results <- CKMSelNo(dataset, 20, 5)
results$cluster.assign
classError(cluster.assign,results$cluster.assign)
### the hill climbing methdos (not developed by us)
withinss = function(X,G,K){
if(is.vector(X) && is.atomic(X)){
group = list()
wcss = 0
for(j in 1:K){
group[[j]] = which(G == j)
l = length(group[[j]])
if(l>1){
wcss = wcss + var(X[group[[j]]])*(l-1)
}
}
} else if (is.matrix(X)){
group = list()
wcss = 0
for(j in 1:K){
group[[j]] = which(G == j)
l = length(group[[j]])
if(l>1){
wcss = wcss + sum(apply(X[group[[j]],],2,var)*(l-1))
}
}
} else {
cat("X is niether a vector nor a matrix! \n")
return(NULL)
}
return(wcss)
}
Alternate= function(X, k,tot, initial_set, s, itermax, threshold){
p = dim(X)[2]
set0 = initial_set
set1 = c(0)
iternum = 0
while(iternum<= itermax && length(setdiff(set1,set0)) + length(setdiff(set0,set1)) > threshold ){
clustering = kmeans(X[,set0],iter.max = 20, centers=k,algorithm = "Hartigan-Wong",trace = 0,nstart=2)
result = clustering$cluster
wcss = apply(X,2,withinss,G = result, K = k)
iternum = iternum + 1
set1 = set0
set0 = which(rank((tot-wcss)/tot,ties.method = "random") > p-s)
}
out = list(final_set = set0, iternum = iternum, result = result, betweenss = clustering$betweenss)
return(out)
}
#compute within-cluster distance by clustering feature by feature, select S of size s based on this
hill_climb = function(X,k,s,itermax,threshold,tolerance){
X = scale(X)
n = dim(X)[1]
p = dim(X)[2]
tot = apply(X,2,var)*(n-1)
wcss = rep(0,p)
for(j in 1:p){
clustering = kmeans(X[,j],iter.max = 10, centers = k,algorithm = "Hartigan-Wong", trace = 0)
wcss[j] = clustering$tot.withinss
}
rank0 = rank((tot-wcss)/tot,ties.method = "random")
initial_set = which(rank0 > s)
out = Alternate(X, k,tot, initial_set, s, 2*itermax, threshold)
output = list(final_set = out$final_set, result = out$result, s = s)
return(output)
}
cluster.assign.sas <- hill_climb(dataset, 20, 100, itermax=20,threshold=0,tolerance=1)
classError(cluster.assign,cluster.assign.sas$cluster.assign)
classError(cluster.assign,cluster.assign.sas$result)
classError(cluster.assign,results$cluster.assign)
sim.data <- DataGenCKM(1500,30,100,5,.5,1)
dataset <- sim.data$data
cluster.assign <- sim.data$cluster.assign
results <- CKMSelNo(dataset, 30, 5)
classError(cluster.assign,results$cluster.assign)
cluster.assign.sas <- hill_climb(dataset, 20, 100, itermax=20,threshold=0,tolerance=1)
classError(cluster.assign,cluster.assign.sas$result)
sim.data <- DataGenCKM(3000,30,100,5,.5,1)
dataset <- sim.data$data
cluster.assign <- sim.data$cluster.assign
results <- CKMSelNo(dataset, 30, 5)
classError(cluster.assign,results$cluster.assign)
cluster.assign.sas <- hill_climb(dataset, 20, 100, itermax=20,threshold=0,tolerance=1)
classError(cluster.assign,cluster.assign.sas$result)
cluster.assign.sas <- hill_climb(dataset, 20, 100, itermax=100,threshold=0,tolerance=1)
classError(cluster.assign,cluster.assign.sas$result)
sim.data <- DataGenCKM(3000,30,100,500,.5,1)
dataset <- sim.data$data
cluster.assign <- sim.data$cluster.assign
results <- CKMSelNo(dataset, 30, 500)
classError(cluster.assign,results$cluster.assign)
cluster.assign.sas <- hill_climb(dataset, 20, 100, itermax=100,threshold=0,tolerance=1)
classError(cluster.assign,cluster.assign.sas$result)
cluster.assign.sas$final_set
results$signaling.set
cluster.assign.sas$s
cluster.assign.sas$result
adjustedRandIndex(cluster.assign, cluster.assign.sas$result)
adjustedRandIndex(cluster.assign, results$cluster.assign)
?rank
sim.data <- DataGenCKM(250,5,100,500,.5,1)
dataset <- sim.data$data
cluster.assign <- sim.data$cluster.assign
cluster.assign.sas <- hill_climb(dataset, 20, 100, itermax=100,threshold=0,tolerance=1)
classError(cluster.assign,cluster.assign.sas$result)
sim.data <- DataGenCKM(150,3,100,5,.5,1)
dataset <- sim.data$data
cluster.assign <- sim.data$cluster.assign
cluster.assign.sas <- hill_climb(dataset, 3, 100, itermax=100,threshold=0,tolerance=1)
classError(cluster.assign,cluster.assign.sas$result)
sim.data <- DataGenCKM(1000,20,100,5,.5,1)
cluster.assign.sas <- hill_climb(dataset, , 100, itermax=100,threshold=0,tolerance=1)
classError(cluster.assign,cluster.assign.sas$result)
cluster.assign.sas <- hill_climb(dataset, 20, 100, itermax=100,threshold=0,tolerance=1)
classError(cluster.assign,cluster.assign.sas$result)
cluster.assign.sas <- hill_climb(dataset, 20, 100, itermax=100,threshold=0,tolerance=1)
classError(cluster.assign,cluster.assign.sas$result)
results <- CKMSelNo(dataset, 30, 500)
results <- CKMSelNo(dataset, 20, 5)
results <- CKMSelNo(dataset, 20, 5)
classError(cluster.assign,results$cluster.assign)
sim.data <- DataGenCKM(1000,20,100,5,.5,1)
dataset <- sim.data$data
cluster.assign <- sim.data$cluster.assign
results <- CKMSelNo(dataset, 20, 5)
classError(cluster.assign,results$cluster.assign)
cluster.assign.sas <- hill_climb(dataset, 20, 100, itermax=100,threshold=0,tolerance=1)
classError(cluster.assign,cluster.assign.sas$result)
sim.data <- DataGenCKM(1000,20,100,5,.5,1)
dataset <- sim.data$data
cluster.assign <- sim.data$cluster.assign
results <- CKMSelNo(dataset, 20, 5)
classError(cluster.assign,results$cluster.assign)
cluster.assign.sas <- hill_climb(dataset, 20, 100, itermax=100,threshold=0,tolerance=1)
classError(cluster.assign,cluster.assign.sas$result)
sim.data <- DataGenCKM(1000,20,100,500,.5,1)
dataset <- sim.data$data
cluster.assign <- sim.data$cluster.assign
results <- CKMSelNo(dataset, 20, 5)
results <- CKMSelNo(dataset, 20, 500)
classError(cluster.assign,results$cluster.assign)
cluster.assign.sas <- hill_climb(dataset, 20, 100, itermax=100,threshold=0,tolerance=1)
classError(cluster.assign,cluster.assign.sas$result)
cluster.assign.sas <- hill_climb(dataset, 20, 100, itermax=100,threshold=0,tolerance=1)
classError(cluster.assign,cluster.assign.sas$result)
cluster.assign.sas <- hill_climb(dataset, 20, 100, itermax=100,threshold=0,tolerance=1)
classError(cluster.assign,cluster.assign.sas$result)
cluster.assign.sas <- hill_climb(dataset, 20, 100, itermax=100,threshold=0,tolerance=1)
classError(cluster.assign,cluster.assign.sas$result)
sim.data <- DataGenCKM(1500,30,100,500,.5,1)
dataset <- sim.data$data
cluster.assign <- sim.data$cluster.assign
cluster.assign.sas <- hill_climb(dataset, 30, 100, itermax=100,threshold=0,tolerance=1)
classError(cluster.assign,cluster.assign.sas$result)
cluster.assign.sas <- hill_climb(dataset, 30, 100, itermax=100,threshold=0,tolerance=1)
classError(cluster.assign,cluster.assign.sas$result)
sim.data <- DataGenCKM(1500,30,50,500,.5,1)
dataset <- sim.data$data
cluster.assign <- sim.data$cluster.assign
cluster.assign.sas <- hill_climb(dataset, 30, 100, itermax=100,threshold=0,tolerance=1)
classError(cluster.assign,cluster.assign.sas$result)
cluster.assign.sas <- hill_climb(dataset, 30, 50, itermax=100,threshold=0,tolerance=1)
classError(cluster.assign,cluster.assign.sas$result)
cluster.assign.sas <- hill_climb(dataset, 30, 50, itermax=100,threshold=0,tolerance=1)
classError(cluster.assign,cluster.assign.sas$result)
results <- CKMSelNo(dataset, 30, 500)
classError(cluster.assign,results$cluster.assign)
results <- CKMSelNo(dataset, 30, 500)
classError(cluster.assign,results$cluster.assign)
cluster.assign.sas <- hill_climb(dataset, 30, 50, itermax=100,threshold=0,tolerance=1)
classError(cluster.assign,cluster.assign.sas$result)
sim.data <- DataGenCKM(1500,30,25,500,.5,1)
results <- CKMSelNo(dataset, 30, 500)
dataset <- sim.data$data
cluster.assign <- sim.data$cluster.assign
results <- CKMSelNo(dataset, 30, 500)
classError(cluster.assign,results$cluster.assign)
results <- CKMSelNo(dataset, 30, 500)
classError(cluster.assign,results$cluster.assign)
cluster.assign.sas <- hill_climb(dataset, 30, 25, itermax=100,threshold=0,tolerance=1)
classError(cluster.assign,cluster.assign.sas$result)
cluster.assign.sas <- hill_climb(dataset, 30, 25, itermax=100,threshold=0,tolerance=1)
classError(cluster.assign,cluster.assign.sas$result)
cluster.assign.sas <- hill_climb(dataset, 30, 25, itermax=100,threshold=0,tolerance=1)
classError(cluster.assign,cluster.assign.sas$result)
results <- CKMSelNo(dataset, 30, 500)
classError(cluster.assign,results$cluster.assign)
results <- CKMSelNo(dataset, 30, 500)
classError(cluster.assign,results$cluster.assign)
sim.data <- DataGenCKM(1500,30,25,500,.7,1)
dataset <- sim.data$data
cluster.assign <- sim.data$cluster.assign
results <- CKMSelNo(dataset, 30, 500)
classError(cluster.assign,results$cluster.assign)
cluster.assign.sas <- hill_climb(dataset, 30, 25, itermax=100,threshold=0,tolerance=1)
classError(cluster.assign,cluster.assign.sas$result)
cluster.assign.sas <- hill_climb(dataset, 30, 25, itermax=100,threshold=0,tolerance=1)
classError(cluster.assign,cluster.assign.sas$result)
results <- CKMSelNo(dataset, 30, 500)
classError(cluster.assign,results$cluster.assign)
sim.data <- DataGenCKM(1500,30,100,1000,.7,1)
dataset <- sim.data$data
cluster.assign <- sim.data$cluster.assign
results <- CKMSelNo(dataset, 30, 500)
results <- CKMSelNo(dataset, 30, 1000)
classError(cluster.assign,results$cluster.assign)
cluster.assign.sas <- hill_climb(dataset, 30, 100, itermax=100,threshold=0,tolerance=1)
classError(cluster.assign,cluster.assign.sas$result)
cluster.assign.sas <- hill_climb(dataset, 30, 100, itermax=100,threshold=0,tolerance=1)
classError(cluster.assign,cluster.assign.sas$result)
cluster.assign.sas <- hill_climb(dataset, 30, 100, itermax=100,threshold=0,tolerance=1)
sim.data <- DataGenCKM(1500,30,100,1000,.6,1)
dataset <- sim.data$data
cluster.assign <- sim.data$cluster.assign
cluster.assign.sas <- hill_climb(dataset, 30, 100, itermax=100,threshold=0,tolerance=1)
classError(cluster.assign,cluster.assign.sas$result)
sim.data <- DataGenCKM(1500,30,100,1000,.6,1)
dataset <- sim.data$data
cluster.assign <- sim.data$cluster.assign
results <- CKMSelNo(dataset, 30, 1000)
classError(cluster.assign,results$cluster.assign)
cluster.assign.sas <- hill_climb(dataset, 30, 100, itermax=100,threshold=0,tolerance=1)
classError(cluster.assign,cluster.assign.sas$result)
sim.data <- DataGenCKM(1500,30,100,10,.6,1)
dataset <- sim.data$data
cluster.assign <- sim.data$cluster.assign
results <- CKMSelNo(dataset, 30, 10)
classError(cluster.assign,results$cluster.assign)
cluster.assign.sas <- hill_climb(dataset, 30, 100, itermax=100,threshold=0,tolerance=1)
classError(cluster.assign,cluster.assign.sas$result)
sim.data <- DataGenCKM(1500,30,100,5,.6,1)
dataset <- sim.data$data
cluster.assign <- sim.data$cluster.assign
results <- CKMSelNo(dataset, 30, 5)
classError(cluster.assign,results$cluster.assign)
cluster.assign.sas <- hill_climb(dataset, 30, 100, itermax=100,threshold=0,tolerance=1)
classError(cluster.assign,cluster.assign.sas$result)
sim.data <- DataGenCKM(1500,30,100,5,.6,1)
dataset <- sim.data$data
cluster.assign <- sim.data$cluster.assign
results <- CKMSelNo(dataset, 30, 5)
classError(cluster.assign,results$cluster.assign)
cluster.assign.sas <- hill_climb(dataset, 30, 100, itermax=100,threshold=0,tolerance=1)
classError(cluster.assign,cluster.assign.sas$result)
sim.data <- DataGenCKM(1500,30,100,5,.6,1)
dataset <- sim.data$data
cluster.assign <- sim.data$cluster.assign
results <- CKMSelNo(dataset, 30, 5)
classError(cluster.assign,results$cluster.assign)
cluster.assign.sas <- hill_climb(dataset, 30, 100, itermax=100,threshold=0,tolerance=1)
classError(cluster.assign,cluster.assign.sas$result)
sim.data <- DataGenCKM(1500,30,100,5,.6,1)
dataset <- sim.data$data
cluster.assign <- sim.data$cluster.assign
results <- CKMSelNo(dataset, 30, 5)
classError(cluster.assign,results$cluster.assign)
cluster.assign.sas <- hill_climb(dataset, 30, 100, itermax=100,threshold=0,tolerance=1)
classError(cluster.assign,cluster.assign.sas$result)
library(CKM)
library(devtools)
library(remotes)
library(CKM)
library(ggplot2)
library(GGally)
library(tidyverse)
library(ClusterSSCA)
library(ggfortify)
library(Rtsne)
ncluster <- 3
nobs <- 150
nnoisevar <- 10
nvalidvar <- 40
mu <- 0.5
var <- 1
sim.data <- DataGenCKM(nobs, ncluster, nvalidvar, nnoisevar, mu, var)
dataset <- sim.data[[1]]
cluster.assign <- sim.data[[2]]
ckm.sel.var <- CKMSelVar(dataset, ncluster, search = "dep", kmeans_starts = 20, n.rep = 20, recal = TRUE, sr = TRUE)
ckm.sel.var[[1]]$signaling.set
length(ckm.sel.var[[1]]$signaling.set)
clusterboot(dataset[,ckm.sel.var[[1]]$signaling.set])
library(fpc)
clusterboot(dataset[,ckm.sel.var[[1]]$signaling.set])
clusterboot(dataset[,ckm.sel.var[[1]]$signaling.set], distances = FALSE)
clusterboot(dataset[,ckm.sel.var[[1]]$signaling.set], distances = FALSE, clustermethod = "kmeansCBI")
clusterboot(dataset[,ckm.sel.var[[1]]$signaling.set], distances = FALSE, clustermethod = kmeansCBI)
clusterboot(dataset[,ckm.sel.var[[1]]$signaling.set], distances = FALSE, clustermethod = kmeansCBI, krange = ncluster)
nselectboot(dataset[,ckm.sel.var[[1]]$signaling.set], clustermethod = kmeansCBI, krange = ncluster)
a <- nselectboot(dataset[,ckm.sel.var[[1]]$signaling.set], clustermethod = kmeansCBI, krange = ncluster)
a
ncluster <- 3
nobs <- 150
nnoisevar <- 10
nvalidvar <- 40
mu <- 0.7
var <- 1
sim.data <- DataGenCKM(nobs, ncluster, nvalidvar, nnoisevar, mu, var)
dataset <- sim.data[[1]]
cluster.assign <- sim.data[[2]]
dataset.new <- dataset
for (i in 1:20){
dataset.new[which(dataset[,i]==1),i] <- 3
dataset.new[which(dataset[,i]==3),i] <- 1
}
ckm.sel.var <- CKMSelVar(dataset.new, ncluster, search = "dep", kmeans_starts = 20, n.rep = 20, recal = TRUE, sr = TRUE)
ckm.sel.var[[1]]$signaling.set
nobs <- 150
nnoisevar <- 10
nvalidvar <- 40
mu <- 0.5
var <- 1
sim.data <- DataGenCKM(nobs, ncluster, nvalidvar, nnoisevar, mu, var)
dataset <- sim.data[[1]]
cluster.assign <- sim.data[[2]]
dataset.new <- dataset
for (i in 1:20){
dataset.new[which(dataset[,i]==1),i] <- 3
dataset.new[which(dataset[,i]==3),i] <- 1
}
ckm.sel.var <- CKMSelVar(dataset.new, ncluster, search = "dep", kmeans_starts = 20, n.rep = 20, recal = TRUE, sr = TRUE)
ckm.sel.var[[1]]$signaling.set
ncluster <- 3
nobs <- 150
nnoisevar <- 10
nvalidvar <- 40
mu <- 0.6
var <- 1
sim.data <- DataGenCKM(nobs, ncluster, nvalidvar, nnoisevar, mu, var)
dataset <- sim.data[[1]]
cluster.assign <- sim.data[[2]]
dataset.new <- dataset
for (i in 1:20){
dataset.new[which(dataset[,i]==1),i] <- 3
dataset.new[which(dataset[,i]==3),i] <- 1
}
ckm.sel.var <- CKMSelVar(dataset.new, ncluster, search = "dep", kmeans_starts = 20, n.rep = 20, recal = TRUE, sr = TRUE)
ckm.sel.var[[1]]$signaling.set
